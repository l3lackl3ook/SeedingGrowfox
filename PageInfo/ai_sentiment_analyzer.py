from openai import OpenAI
import os
import json
import re
from dotenv import load_dotenv

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def analyze_sentiment_and_category(content, image_url=None, post_product="Hygiene"):
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå Facebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå Hygiene
    """
    prompt = f"""
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå Facebook ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç Consumer Insight ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

    ‚≠êÔ∏è **Context ‡πÇ‡∏û‡∏™‡∏ï‡πå**
    - Product: {post_product}
    - Image URL (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ): {image_url}
    
    ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå ‡πÑ‡∏Æ‡∏¢‡∏µ‡∏ô‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡πÄ‡∏û‡∏¥‡∏£‡πå‡∏ó‡πÅ‡∏Ñ‡∏£‡πå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà‡πÇ‡∏ó‡∏™‡∏ï‡πå ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô ‡∏•‡∏≤‡∏¢‡πÄ‡∏Ñ‡πâ‡∏Å

    ‚≠êÔ∏è **‡πÇ‡∏à‡∏ó‡∏¢‡πå**
    1. ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡πÅ‡∏ó‡πá‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠ mention author ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ category = "‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô" ‡πÅ‡∏•‡∏∞ sentiment = "neutral"
    2. ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ author ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠ ‡πÉ‡∏´‡πâ category = "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö" ‡πÅ‡∏•‡∏∞ sentiment = "neutral"
    3. ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏™‡∏µ‡πÉ‡∏î ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Positive category = "‡πÉ‡∏ä‡πâ‡∏î‡∏µ"
    4. ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡πÅ‡∏ï‡πà‡∏°‡∏µ image_url ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏µ‡πÉ‡∏î‡πÉ‡∏ô 7 ‡∏™‡∏µ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô Positive category = "‡πÉ‡∏ä‡πâ‡∏î‡∏µ"
    5. ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î category ‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ (*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏´‡πâ‡∏≤‡∏° "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á*):
      - ‡πÉ‡∏ä‡πâ‡∏î‡∏µ
      - ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°
      - ‡∏£‡∏≤‡∏Ñ‡∏≤
      - ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô
      - ‡πÑ‡∏°‡πà‡∏´‡∏≠‡∏°
      - ‡∏Ñ‡∏£‡∏≤‡∏ö‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å

    ‚≠êÔ∏è **Sentiment**:
      - Positive: ‡πÉ‡∏ä‡πâ‡∏î‡∏µ, ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°, ‡∏≠‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏≤‡∏ö, ‡∏ô‡πà‡∏≤‡∏•‡∏≠‡∏á, ‡∏ï‡∏≤‡∏°‡∏ö‡πâ‡∏≤‡∏á, ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏î‡∏µ, ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°, ‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏™‡∏µ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≤‡∏ß, ‡∏ü‡πâ‡∏≤, ‡∏ä‡∏°‡∏û‡∏π), ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      - neutral: ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤, ‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô, ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      - negative: ‡πÑ‡∏°‡πà‡∏´‡∏≠‡∏°, ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏â‡∏∏‡∏ô, ‡∏Ñ‡∏£‡∏≤‡∏ö‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å

    ‚≠êÔ∏è **Output ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (JSON format ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)**

    {{
        "sentiment": "Positive", // ‡∏ï‡∏±‡∏ß P ‡πÉ‡∏´‡∏ç‡πà ‡∏´‡∏£‡∏∑‡∏≠ neutral / negative ‡∏ï‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        "reason": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö",
        "keyword_group": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå/‡∏™‡∏µ Hygiene ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (*‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥*)",
        "category": "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô"
    }}

    ‚≠êÔ∏è **‡∏´‡πâ‡∏≤‡∏°**:
    - ‡πÉ‡∏™‡πà backtick
    - ‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô field ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    - ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏≠‡∏Å JSON

    üéØ **‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå**:
    "{content}"

    üéØ **Image URL**:
    "{image_url}"
    """

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are an expert Thai sentiment categorizer and consumer insight analyst."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.2
    )

    try:
        raw = response.choices[0].message.content

        # üîß clean backtick ‡∏´‡∏£‡∏∑‡∏≠ ```json
        clean = re.sub(r"```json|```", "", raw).strip()

        # üîß ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô JSON, ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ {...}
        match = re.search(r"\{.*\}", clean, re.DOTALL)
        if match:
            result = json.loads(match.group())
        else:
            raise ValueError("JSON not found in AI response")

        # ‚úÖ ‡πÅ‡∏Å‡πâ sentiment format ‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå
        sentiment = result.get("sentiment", "").strip()
        if sentiment.lower() == "positive":
            sentiment = "Positive"
        elif sentiment.lower() == "neutral":
            sentiment = "neutral"
        elif sentiment.lower() == "negative":
            sentiment = "negative"
        else:
            sentiment = ""

        final_result = {
            "sentiment": sentiment,
            "reason": result.get("reason", "").strip(),
            "keyword_group": result.get("keyword_group", "").strip(),
            "category": result.get("category", "").strip(),
        }

        return final_result

    except Exception as e:
        print("‚ùå Error parsing AI response:", e)
        print("Raw response:", raw)
        return {"sentiment": "", "reason": "", "keyword_group": "", "category": ""}
