from openai import OpenAI
import os
import json
import re
from dotenv import load_dotenv

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def analyze_sentiment_and_category(content, image_url=None):
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå Ivy ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    """
    prompt = f"""
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå Facebook ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ô‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß Ivy ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç Consumer Insight

    ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå: "{content}"

    - ‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó sentiment ‡πÄ‡∏õ‡πá‡∏ô "Positive" (‡∏ï‡∏±‡∏ß P ‡πÉ‡∏´‡∏ç‡πà), ‡∏´‡∏£‡∏∑‡∏≠ "neutral"/"negative" (‡∏ï‡∏±‡∏ß n ‡πÄ‡∏•‡πá‡∏Å)
    - ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• (reason) ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ (‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö)
    - Keyword Group (‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å) ‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏£‡πà‡∏≠‡∏¢, ‡∏´‡∏ß‡∏≤‡∏ô, ‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏û‡∏¥‡∏Å‡∏±‡∏î, ‡∏´‡∏ß‡∏≤‡∏ô‡∏ï‡∏±‡∏î‡∏Ç‡∏≤, ‡∏Å‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
    - Category (‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà) ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô, ‡∏Ñ‡∏≥‡∏ä‡∏°, ‡∏Ñ‡∏≥‡∏ï‡∏¥, ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ

    ‚≠êÔ∏è ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
    {{
        "sentiment": "Positive",
        "reason": "‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô",
        "keyword_group": "‡∏≠‡∏£‡πà‡∏≠‡∏¢",
        "category": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥"
    }}

    ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å JSON, ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà backtick, ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô field ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    """

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are an expert Thai sentiment categorizer."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.2
    )

    try:
        raw = response.choices[0].message.content

        # üîß clean backtick ‡∏´‡∏£‡∏∑‡∏≠ ```json
        clean = re.sub(r"```json|```", "", raw).strip()

        # üîß ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô JSON, ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ {...}
        match = re.search(r"\{.*\}", clean, re.DOTALL)
        if match:
            result = json.loads(match.group())
        else:
            raise ValueError("JSON not found in AI response")

        # ‚úÖ ‡πÅ‡∏Å‡πâ sentiment format ‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå
        sentiment = result.get("sentiment", "").strip()
        if sentiment.lower() == "positive":
            sentiment = "Positive"
        elif sentiment.lower() == "neutral":
            sentiment = "neutral"
        elif sentiment.lower() == "negative":
            sentiment = "negative"
        else:
            sentiment = ""

        final_result = {
            "sentiment": sentiment,
            "reason": result.get("reason", "").strip(),
            "keyword_group": result.get("keyword_group", "").strip(),
            "category": result.get("category", "").strip(),
        }

        return final_result

    except Exception as e:
        print("‚ùå Error parsing AI response:", e)
        print("Raw response:", raw)
        return {"sentiment": "", "reason": "", "keyword_group": "", "category": ""}
